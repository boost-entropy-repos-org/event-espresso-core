{"version":3,"sources":["../domains/eventEditor/src/ui/tickets/TicketRegistrationsLink.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketDetailsPanel.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/Details.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCardSidebar.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCard.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/CardView.tsx"],"names":["tooltipProps","placement","TicketRegistrationsLink","ticket","regListUrl","useRegistrationsLink","ticket_id","dbId","countTitle","__","tooltip","count","registrationCount","emphasizeZero","title","href","TicketQuantity","entity","updateEntity","useTicketMutator","id","onChange","useCallback","qty","quantity","parseInfinity","value","EditableName","className","view","lineCount","onChangeName","name","ticketName","fitText","tag","useRecalculateBasePrice","ticketId","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","tpcData","updatedTicket","price","getBasePrice","prices","newPrices","order","isNew","calculateBasePrice","then","relatedPriceIds","reverseCalculate","EditablePrice","recalculateBasePrice","onChangePrice","amount","parseFloat","wrapperProps","useMemoStringify","isEditDisabled","Boolean","sold","SOLD_TICKET_ERROR_MESSAGE","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","TicketDetailsPanel","adminUrl","eventId","details","useMemo","label","type","Details","siteUrl","useConfig","getAdminUrl","adminSiteUrl","admin","page","ADMIN_ROUTES","REGISTRATIONS","useEventId","onUpdate","description","text","TicketCardSidebar","displayStartOrEndDate","useTicketsListFilterState","siteTimeToUtc","useTimeZoneTime","onEditHandler","start","end","startDate","toISOString","endDate","statusText","getTicketStatusTextLabel","displayDate","header","TicketCard","useTicketItem","bgClassName","ticketStatusBgColorClassName","actionsMenu","layout","EntityActionsMenuLayout","Vertical","reverse","sidebar","sidebarClass","CardView","filteredTicketIds","useFilteredTicketIds","EntityCard","entityIds"],"mappings":"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","file":"static/js/tickets-card-view.232ce86f.chunk.js","sourcesContent":["import React from 'react';\nimport { __ } from '@eventespresso/i18n';\n\nimport { RegistrationsLink, ItemCount } from '@eventespresso/components';\nimport type { Ticket } from '@eventespresso/edtr-services';\nimport { useRegistrationsLink } from '@eventespresso/edtr-services';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst tooltipProps = { placement: 'top' as const };\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst regListUrl = useRegistrationsLink({ ticket_id: ticket.dbId });\n\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view ALL registrations for this ticket.');\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} emphasizeZero={false} title={countTitle}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} tooltipProps={tooltipProps} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default TicketRegistrationsLink;\n","import React, { useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\n\nimport { parseInfinity } from '@eventespresso/utils';\nimport { InlineEditInfinity, TextProps } from '@eventespresso/components';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.quantity, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tonChange={onChange}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t\ttooltip={__('edit quantity of tickets available…')}\n\t\t/>\n\t);\n};\n\nexport default TicketQuantity;\n","import React, { useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/components';\n\ninterface EditableNameProps extends TicketItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<Partial<EditableNameProps>> = ({ className, entity: ticket, view = 'card' }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\tconst tooltip = __('edit title…');\n\n\tconst ticketName = ticket.name || tooltip;\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tfitText={view === 'card'}\n\t\t\tlineCount={lineCount}\n\t\t\tonChange={onChangeName}\n\t\t\ttag={view === 'table' ? 'div' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default EditableName;\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => void;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\t(ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData?.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst exitingBasePrice = getBasePrice(tpcData?.prices);\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tif (!exitingBasePrice) {\n\t\t\t\tconst newPrices = [\n\t\t\t\t\t// add the default price\n\t\t\t\t\t{ ...defaultBasePrice, order: 1, isNew: true },\n\t\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t\t// may be their taxation systen works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t\t...tpcData?.prices,\n\t\t\t\t];\n\t\t\t\ttpcData = { ...tpcData, prices: newPrices };\n\t\t\t}\n\t\t\t// get the list of updated prices with the amount of base price updated\n\t\t\tconst newPrices = calculateBasePrice(tpcData);\n\n\t\t\tmutatePrices(newPrices).then((relatedPriceIds) => {\n\t\t\t\tupdateTicket({\n\t\t\t\t\t// this is the ticket prices amount\n\t\t\t\t\tprice: ticketPrice,\n\t\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\t\treverseCalculate: true,\n\t\t\t\t\t// Make sure related prices are updated\n\t\t\t\t\tprices: relatedPriceIds,\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import React, { useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\n\nimport { InlineEditCurrency } from '@eventespresso/components';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { SOLD_TICKET_ERROR_MESSAGE } from '@eventespresso/tpc';\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport type { TicketItemProps } from '../types';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<Partial<EditablePriceProps>> = ({ entity: ticket, className }) => {\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = parseFloat(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\tconst isEditDisabled = Boolean(ticket.sold);\n\n\tconst tooltip = isEditDisabled ? SOLD_TICKET_ERROR_MESSAGE : __('edit ticket total…');\n\n\treturn (\n\t\t<InlineEditCurrency\n\t\t\tid={ticket.id}\n\t\t\tamount={ticket.price}\n\t\t\tisEditDisabled={isEditDisabled}\n\t\t\tplaceholder={__('set price…')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={tooltip}\n\t\t/>\n\t);\n};\n\nexport default EditablePrice;\n","import React from 'react';\n\nimport { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import React from 'react';\n\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport { EntityActionsMenu } from '@eventespresso/components';\nimport { Ticket } from '@eventespresso/edtr-services';\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default TicketActionsMenu;\n","import React, { useMemo } from 'react';\nimport { __ } from '@eventespresso/i18n';\n\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\nimport { EntityDetailsPanel, EntityDetailsPanelSold } from '@eventespresso/components';\nimport TicketQuantity from './TicketQuantity';\nimport type { TicketItemProps } from '../types';\n\nconst TicketDetailsPanel: React.FC<TicketItemProps> = ({ adminUrl, entity: ticket, eventId }) => {\n\tconst details = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-sold',\n\t\t\t\tlabel: __('sold'),\n\t\t\t\tvalue: (\n\t\t\t\t\t<EntityDetailsPanelSold\n\t\t\t\t\t\tadminUrl={adminUrl}\n\t\t\t\t\t\tdbId={ticket.dbId}\n\t\t\t\t\t\teventId={eventId}\n\t\t\t\t\t\tsold={ticket.sold}\n\t\t\t\t\t\ttype='ticket'\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-qty',\n\t\t\t\tlabel: __('quantity'),\n\t\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'ee-ticket-registrations',\n\t\t\t\tlabel: __('reg list'),\n\t\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t},\n\t\t],\n\t\t[adminUrl, eventId, ticket]\n\t);\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-ticket-details-sold-rsrvd-qty-div' />;\n};\n\nexport default TicketDetailsPanel;\n","import React, { useCallback, useMemo } from 'react';\nimport { __ } from '@eventespresso/i18n';\n\nimport { ADMIN_ROUTES } from '@eventespresso/constants';\nimport { RichTextEditorModal } from '@eventespresso/components';\nimport { useConfig } from '@eventespresso/services';\nimport { getAdminUrl, useTicketMutator, useEventId } from '@eventespresso/edtr-services';\n\nimport { EditableName, EditablePrice } from '../editable';\nimport TicketDetailsPanel from './TicketDetailsPanel';\n\nimport type { TicketItemProps } from '../types';\n\nconst Details: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { siteUrl } = useConfig();\n\n\tconst adminUrl = useMemo(() => {\n\t\treturn getAdminUrl({ adminSiteUrl: siteUrl.admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\t}, [siteUrl.admin]);\n\n\tconst eventId = useEventId();\n\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onUpdate = useCallback(\n\t\t(description: string): void => {\n\t\t\tupdateEntity({ description });\n\t\t},\n\t\t[updateEntity]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={ticket} />\n\n\t\t\t<RichTextEditorModal\n\t\t\t\tclassName='entity-card-details__text'\n\t\t\t\tonUpdate={onUpdate}\n\t\t\t\ttext={ticket.description}\n\t\t\t\ttitle={__('Edit description')}\n\t\t\t\ttooltip={__('edit description…')}\n\t\t\t/>\n\n\t\t\t<EditablePrice className='entity-card-details__price' entity={ticket} />\n\n\t\t\t<TicketDetailsPanel adminUrl={adminUrl} entity={ticket} eventId={eventId} />\n\t\t</>\n\t);\n};\n\nexport default Details;\n","import React, { useCallback } from 'react';\nimport { __ } from '@eventespresso/i18n';\n\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/components';\nimport { getTicketStatusTextLabel } from '@eventespresso/helpers';\nimport { useTicketMutator, useTicketsListFilterState } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { DateRange } from '@eventespresso/dates';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCardSidebar: React.FC<Partial<TicketItemProps>> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onEditHandler = useCallback(\n\t\t([start, end]: DateRange): void => {\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(start).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(end).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getTicketStatusTextLabel(ticket);\n\n\treturn ticket ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\theader={__('Edit Ticket Sale Dates')}\n\t\t\t\tonEditHandler={onEditHandler}\n\t\t\t\ttooltip={__('edit ticket sales start and end dates')}\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t/>\n\t\t\t<div className={'ee-ticket-status-label'}>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default TicketCardSidebar;\n","import React from 'react';\n\nimport Details from './Details';\nimport TicketCardSidebar from './TicketCardSidebar';\nimport TicketActionsMenu from '../actionsMenu/TicketActionsMenu';\nimport { EntityActionsMenuLayout } from '@eventespresso/components';\nimport { EntityCard } from '@eventespresso/components';\nimport { ticketStatusBgColorClassName } from '@eventespresso/helpers';\nimport { useTicketItem } from '@eventespresso/edtr-services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCard: React.FC<TicketItemProps> = ({ id }) => {\n\tconst ticket = useTicketItem({ id });\n\tconst bgClassName = ticketStatusBgColorClassName(ticket);\n\n\treturn ticket ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<TicketActionsMenu entity={ticket} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tdetails={<Details entity={ticket} />}\n\t\t\tentity={ticket}\n\t\t\treverse\n\t\t\tsidebar={<TicketCardSidebar entity={ticket} />}\n\t\t\tsidebarClass={bgClassName}\n\t\t/>\n\t) : null;\n};\n\nexport default TicketCard;\n","import React from 'react';\n\nimport { EntityCardList } from '@eventespresso/components';\nimport { useFilteredTicketIds } from '@eventespresso/edtr-services';\n\nimport TicketCard from './TicketCard';\n\nconst CardView: React.FC = () => {\n\tconst filteredTicketIds = useFilteredTicketIds();\n\n\treturn <EntityCardList EntityCard={TicketCard} entityIds={filteredTicketIds} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}